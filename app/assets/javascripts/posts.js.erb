// Global variables
  // These are used & defined when a keydown event is fired in the text input area
var s = Snap("#canvas"); // setting up snap svg
var wordsString = ""; // all of the pressed keys/words as a string
var pressedKeys; // array of all keys pressed
var wordsArray; // array of all words
var word = "";

// Triggered when space key pressedKeys
var spaceFunction = function ( word ) {
  console.log( word );
  wordsString = pressedKeys.join("") || wordsString;
  console.log(pressedKeys);
  console.log(pressedKeys.join(""));
  console.log(wordsString); // returning 'test' - first word only
  console.log(wordsString.split(" "));
  console.log(wordsArray);
  // console.log(wordsArray.length);
  if ( wordsArray > 0 ) {
    if (wordsArray.length > 0) {
      wordsArray = wordsArray;
    } else {
      wordsArray = wordsString.split(" ");
}
  } else { wordsArray = wordsString.split(" "); }
  console.log(wordsArray); // returning array with empty string
  var lastWord = wordsArray[wordsArray.length - 1] || word;
  console.log(lastWord); // ! returning word
  console.log(word);
  var startsWith = lastWord[0] || word;
  console.log(startsWith); // !issue: undefined
  if ( !word ) {
    console.log("!word ran"); // not running
    animateArray.push(startsWith);
    console.log(animateArray);
  }

  if (startsWith === "a" || startsWith === "A" || startsWith === "1") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "b" || startsWith === "B" || startsWith === "2") {
    console.log("purple");
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#663399',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "c" || startsWith === "C" || startsWith === "3") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#00ffff',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "d" || startsWith === "D" || startsWith === "4") {
    var blueRect = s.rect(350, 150, 40, 80, 0, 0);
    blueRect.attr({
      fill:'#2783b2',
      stroke: "#000",
      strokeWidth: 2,
      class: "anims",
      id: "blueRect"
    });
    blueRect.animate({width: 80}, 2000, mina.bounce);
  } else if (startsWith === "e" || startsWith === "E" || startsWith === "5") {
    var yelRect = s.rect(250, 350, 10, 20);
    var yelRectGroup = s.group(yelRect, s.rect(350, 250, 20, 10));
    yelRectGroup.attr({
      fill:'#f9ec33',
      stroke: "#000",
      strokeWidth: 2,
      class: "anims",
      id: "yelRect"
    });
    yelRect.animate({width: 250}, 2000, mina.easein);
  } else if (startsWith === "f" || startsWith === "F" || startsWith === "6") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "g" || startsWith === "G" || startsWith === "7") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "h" || startsWith === "H" || startsWith === "8") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "i" || startsWith === "I" || startsWith === "9") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "j" || startsWith === "J" || startsWith === "0") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "k" || startsWith === "K") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "L" || startsWith === "l") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "M" || startsWith === "m") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "n" || startsWith === "N") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "o" || startsWith === "O") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "p" || startsWith === "P") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "q" || startsWith === "Q") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "r" || startsWith === "R") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "s" || startsWith === "S") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "t" || startsWith === "T") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "u" || startsWith === "U") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "v" || startsWith === "V") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "w" || startsWith === "W") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "x" || startsWith === "X") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "y" || startsWith === "Y") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else if (startsWith === "z" || startsWith === "Z") {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  } else {
    var bigCircle = s.circle(350, 150, 10);
    bigCircle.attr({
      fill:'#0dd333',
      stroke: "#000",
      strokeWidth: 5,
      class: "anims",
      id: "bigCircle"
    });
    bigCircle.animate({r:40}, 2000, mina.bounce);
  }
};

// $(document).ready(function () {

  // all input is pushed to this array
  pressedKeys = [];
  animateArray = animateArray || [];

  // event: logging live text preview
    window.addEventListener('keydown', function(e) {

      // console.log(e.key);
      // console.log(e.keyCode);

      // TO DO: Expand delete functionality to coincide with indexOf value when arrow keys are used...
      if (e.keyCode === 46 || e.keyCode === 8) {
        pressedKeys.pop();
        // console.log(pressedKeys);

        // TO DO: Render a new line when 'Enter' key is pressedKeys
      // } else if (e.keyCode === 13){
      //   pressedKeys.push("<br />"); - try googling for shift + enter or maybe try utilising mousetrap
      //   console.log(pressedKeys);

      // removing fn keys from live text preview
    } else if (e.keyCode === 16 || e.keyCode === 17 || e.keyCode === 18 || e.keyCode === 91 || e.keyCode === 93 || e.keyCode === 20 || e.keyCode === 9 || e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40 || e.keyCode === 13) {
        // console.log(e.key + " is invalid");
        return e.key;
      } else {
          pressedKeys.push(e.key);
          // console.log(pressedKeys);
      }
        var liveText = pressedKeys.join("");
        // console.log(liveText);
        var $p = $(".live-text");
        $p.text(liveText);

        $(".live-text").val("");

        $("#text-preview").append($p);

    });

$(document).ready(function () {

    // SNAP TESTING

    Mousetrap.bind('a b c d e', function() {
      console.log("Mousetrapped: konami");
      Snap.load('<%= image_path( "svg2.svg" ) %>', function(f) {
        f.selectAll("path").attr({stroke: "#336699", class: "anims", id: "svg2"});
        var g = f.select("g");
        s.append(g);
      });
    });

    Mousetrap.bind("z z z", function() {
      console.log("zzzzz");
      Snap.load('<%= image_path("svg1.svg") %>', function(f) {
        f.selectAll("path").attr({stroke: "#f0c06e", class: "anims", id: "svg1"});
        var g = f.select("g");
        s.append(g);
      });
    });

  // function onSVGLoaded(data){
  //   s.append(data);
  // }

    Mousetrap.bind('f g h', function() {
      console.log("Mousetrapped: konami");
      Snap.load('<%= image_path("svg3.svg") %>', function (f) {
        f.selectAll("path").attr({stroke: "#00ff00", class: "anims", id: "face" });
        var g = f.select("g");
        s.append(g);
        g.drag();
        var path = g.select("path");
        var length = path.getTotalLength();
        console.log( length );
        path.attr({
          cx: 100,
          'stroke-dasharray': length, 'stroke-dashoffset': length
        });
        path.animate({
          cx: 400,
          stroke: "#ff0000",
          'stroke-dashoffset': '0'
        }, 2000, mina.easein);
      });
    });


    Mousetrap.bind("d space", function () {
      console.log("ends with d");
      var bigCircle = s.circle(350, 150, 10);
      bigCircle.attr({
        fill:'#0dd333',
        stroke: "#000",
        strokeWidth: 5,
        class: "anims",
        id: "bigCircle"
      });
      bigCircle.animate({r:40}, 2000, mina.bounce);
    });



    // Bind mousetrap to anything that would end a word
      // Get all of the text that the user has typed
        // Split it on all word boundaries
          // Run an animation for each one

  // Actual Mousetrap logic

  Mousetrap.bind('space', spaceFunction);


    // heart easter egg - CHANGE THIS TO SVG
    Mousetrap.bind('< 3', function() { console.log("Mousetrapped: heart");
    var $heartImg = $("<img>");
    $heartImg.attr("src", "/assets/images/heart.png");
    $heartImg.addClass("heart animation");

    $("#canvas").append($heartImg);

    });


    // events: background color
    Mousetrap.bind('.', function() {
      console.log("Mousetrapped: color change");
      var bgColors = ["#FFF000", "#663399", "#03502d", "#909090", "#000", "#3c53e1", "#d794cb", "#500319", "#b00000", "#024795", "#e8eff7", "#e667f9", "#061c4f"];
      var randomColor = bgColors[Math.floor(Math.random()*bgColors.length)];
      console.log(randomColor);
      $("#canvas").css({"backgroundColor": randomColor});
    });


    // TO DO: EASTER EGG
  //   Mousetrap.bind('w h e r e  y o u c o m e f r o m a n d w h e r e y o u g o n n a g o t h i s t i m e', function() {
  //   console.log("Play Tell Me Baby");
  // });
  //
  // if (pressedKeys.join("") === "where you come from and where you gonna go this time") {
  //   console.log("Play Tell Me Baby");
  // }



    // REDO BUTTON functionality
    $("#redo").on("click", function (e) {
      e.preventDefault(e);
      console.log("Imma redo this canvas");
    });

    // PLAY BUTTON FUNCTIONALITY
    $("#play").on("click", function (e) {
      e.preventDefault();
      console.log("TEST", animateArray);
      if ( animateArray && animateArray.length > 0 ) {
        for ( var i = 0; i < wordsArray.length; i += 1 ) {
          console.log("AKK");
          // window.setTimeout(function () {
            displayWord( i );
          // }, i * 1000);
        }
      }
    });

});

var animateArray = animateArray || [];

// to space out animation timing
var displayWord = function ( num, wordsArray ) {
  console.log(num);
  window.setTimeout(function () {
    var word = wordsArray[num];
    console.log(wordsArray);
    console.log(num);
    console.log(word);
    spaceFunction( word );
  }, num * 1000);
};

if ( animateArray && animateArray.length > 0 ) {
  for ( var i = 0; i < wordsArray.length; i += 1 ) {
    console.log("an animate iteration ran");
    console.log( animateArray[ i ], wordsArray[ i ] );
//     // window.setTimeout(function () {
      displayWord( i, wordsArray );
//     // }, i * 1000);
  }
}
